{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5c87efbe-ac07-4b8c-9e35-8c244063b814",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "def guess_the_number():\n",
    "    number + raandom.randint(1,10)\n",
    "    guess = int (input(\"Guess a number between 1 and 10:\"))\n",
    "\n",
    "    if  guess == number:\n",
    "        print(\"Correct! You guessed it!\")\n",
    "    else:\n",
    "         print(f\"Wrong! The number was {number}\")\n",
    "\n",
    "    guess_the_number()\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b68f76c-b0b4-4c1b-89e4-9ab4b7f392c4",
   "metadata": {},
   "source": [
    "#Dice roller"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "01b51d8d-50e7-425c-b44c-c07f471eed53",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "press enter to roll the dice... \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "you rolled a 6\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "\n",
    "def roll_dice():\n",
    "    input (\"press enter to roll the dice...\")\n",
    "    dice = random.randint(1,6)\n",
    "    print(f\"you rolled a {dice}\")\n",
    "\n",
    "roll_dice()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d69656d6-fe4d-43c0-b5be-ee2676090bb9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "pres Enter to  roll the dice... \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "you rolled: 4\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "roll again?(y/n): n\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "\n",
    "def roll_dice():\n",
    "    return random.randint(1,6)\n",
    "while True:\n",
    "    input(\"pres Enter to  roll the dice...\")\n",
    "    print(\"you rolled:\", roll_dice())\n",
    "    again = input(\"roll again?(y/n):\")\n",
    "    if again.lower() != 'y':\n",
    "        break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d52e238c-1342-4416-aae5-3e8d09079182",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tkinter as tk"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "fe713f3c-33e0-4f34-a67b-fd8d5bc4c0f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "\n",
    "def roll_dice():\n",
    "    dice_value = random.randint(1,6)\n",
    "    label_result.config(text=f\"You rolled:{dice_value}\")\n",
    "    dice_label.config(text=dice_unicode[dice_value])\n",
    "    #unicode characters for dice faces \n",
    "dice_unicode ={\n",
    "    1:\"\\u2680\",\n",
    "    2: \"\\u2681\",\n",
    "    3: \"\\u2682\",\n",
    "    4: \"\\u2683\",\n",
    "    5: \"\\u2684\",\n",
    "    6: \"\\u2685\"\n",
    "}#create main window\n",
    "root = tk.Tk()\n",
    "root.title(\"Dice Roller\")\n",
    "root.geometry(\"300x200\")\n",
    "\n",
    "# Dice face display\n",
    "dice_label = tk.Label(root,text=\"\", font=(\"Helvetica\",100))\n",
    "dice_label.pack()\n",
    "#result text display\n",
    "label_result = tk.Label(root, text=\"Click to roll the dice\", font=(\"Helvetica\",14))\n",
    "label_result.pack(pady=10)\n",
    "\n",
    "#roll button\n",
    "roll_button = tk.Button(root,text=\"Roll Dice\",command=roll_dice,font=(\"Helvetica\",12))\n",
    "roll_button.pack()\n",
    "#run the GUI loop\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "92e6fc20-d5fd-4f7a-ac26-d6949f804f2e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hi, i'm Shruti Khati. I am a girl. I like to write, but I am not a write. I write just anything. Today i tured 20!!! But, i feel really anxious.\n",
      "helo i am shruti\n",
      "Similarity Percentage: 40.00%\n"
     ]
    }
   ],
   "source": [
    "#take two file input and compare the similarity. calculate the percent of similarity \n",
    "fhand1= open('mycurrentstate.txt')\n",
    "fhand2= open('state2.txt')\n",
    "for content in fhand1:\n",
    "    print(content)\n",
    "for content in fhand2:\n",
    "    print(content)\n",
    "def similarity_compute(fhand1,fhand2):\n",
    "    intersected_words = set(fhand1).intersection(fhand2)\n",
    "    similarity_percentage = (intersected_words/ ((len(fhand1) + len(fhand2)) / 2)) * 100\n",
    "    similarity_percentage = similarity_compute(fhand1, fhand2)\n",
    "    \n",
    "print(\"Similarity Percentage: {:.2f}%\".format(similarity_percentage))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1d5a5f94-e5b1-49f8-90f0-33142a7aa133",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f189404e-2583-4fb4-9743-e0b92982feea",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
